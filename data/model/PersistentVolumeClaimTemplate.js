/**
 * Red Hat Open Innovation Labs Console API
 * Specification for interaction between the Labs Console front-end and back-end. Additionally, this API will be used to experiment with new concepts in order to allow the Automation API (https://github.com/rht-labs/automation-api) to remain stable.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: rhc-open-innovation-labs@redhat.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./LabelSelectorTemplate'));
  } else {
    // Browser globals (root is window)
    if (!root.RedHatOpenInnovationLabsConsoleApi) {
      root.RedHatOpenInnovationLabsConsoleApi = {};
    }
    root.RedHatOpenInnovationLabsConsoleApi.PersistentVolumeClaimTemplate = factory(root.RedHatOpenInnovationLabsConsoleApi.ApiClient, root.RedHatOpenInnovationLabsConsoleApi.LabelSelectorTemplate);
  }
}(this, function(ApiClient, LabelSelectorTemplate) {
  'use strict';




  /**
   * The PersistentVolumeClaimTemplate model module.
   * @module model/PersistentVolumeClaimTemplate
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>PersistentVolumeClaimTemplate</code>.
   * @alias module:model/PersistentVolumeClaimTemplate
   * @class
   */
  var exports = function() {
    var _this = this;






  };

  /**
   * Constructs a <code>PersistentVolumeClaimTemplate</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PersistentVolumeClaimTemplate} obj Optional instance to populate.
   * @return {module:model/PersistentVolumeClaimTemplate} The populated <code>PersistentVolumeClaimTemplate</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Integer');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('access_modes')) {
        obj['access_modes'] = ApiClient.convertToType(data['access_modes'], ['String']);
      }
      if (data.hasOwnProperty('storage')) {
        obj['storage'] = ApiClient.convertToType(data['storage'], 'Integer');
      }
      if (data.hasOwnProperty('selector')) {
        obj['selector'] = LabelSelectorTemplate.constructFromObject(data['selector']);
      }
    }
    return obj;
  }

  /**
   * @member {Integer} id
   */
  exports.prototype['id'] = undefined;
  /**
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * @member {Array.<module:model/PersistentVolumeClaimTemplate.AccessModesEnum>} access_modes
   */
  exports.prototype['access_modes'] = undefined;
  /**
   * @member {Integer} storage
   */
  exports.prototype['storage'] = undefined;
  /**
   * @member {module:model/LabelSelectorTemplate} selector
   */
  exports.prototype['selector'] = undefined;


  /**
   * Allowed values for the <code>accessModes</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AccessModesEnum = {
    /**
     * value: "ReadWriteOnce"
     * @const
     */
    "ReadWriteOnce": "ReadWriteOnce",
    /**
     * value: "ReadOnlyMany"
     * @const
     */
    "ReadOnlyMany": "ReadOnlyMany",
    /**
     * value: "ReadWriteMany"
     * @const
     */
    "ReadWriteMany": "ReadWriteMany"  };


  return exports;
}));


